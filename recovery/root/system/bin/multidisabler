#!/sbin/sh

# Multi-disabler v4.0 for Samsung devices
# running Android 9 or later.
# by Ian Macdonald, enhanced by afaneh92 and modified again by ragebreaker

# Global variables
VERBOSE=false
DRY_RUN=false
LOG_FILE="/tmp/multidisabler.log"
BACKUP_DIR="/tmp/multidisabler_backup"
SUPPORTED_ANDROID_VERSIONS="9 10 11 12 13"

# Function to log messages
log() {
    echo "$1" | tee -a "$LOG_FILE"
    $VERBOSE && echo "$1"
}

# Function to show progress
show_progress() {
    echo -n "$1"
    for i in $(seq 1 10); do
        echo -n "."
        sleep 0.1
    done
    echo " Done"
}

# Function to backup a file
backup_file() {
    mkdir -p "$BACKUP_DIR"
    cp "$1" "$BACKUP_DIR/$(basename "$1").bak"
    log "Backed up $1"
}

# Function to rollback changes
rollback() {
    log "Rolling back changes..."
    for file in "$BACKUP_DIR"/*; do
        cp "$file" "${file%.bak}"
        log "Restored ${file%.bak}"
    done
}

# Function to calculate MD5 hash
md5() {
    md5sum -b "$1"
}

# Function to check if file has changed
file_changed() {
    local file="$1"
    local old_md5="$2"
    local new_md5=$(md5 "$file")

    if [ $new_md5 != $old_md5 ]; then
        log " -     ...modified."
    else
        log " -     ...unchanged."
    fi
}

# Function to resize vendor partition
resize_vendor() {
    local dm_block=$(df -k | grep "/vendor" | cut -d' ' -f1)
    local old_blocks=$(df -k | grep "/vendor" | cut -d' ' -f6)
    local new_blocks=$((old_blocks + 102400))
    local available_space=$(df -k / | awk 'NR==2 {print $4}')

    if [ $available_space -lt 102400 ]; then
        log "Error: Not enough space to resize vendor partition"
        return 1
    fi

    log " - Unmounting /vendor..."
    umount /vendor || { log "Error: Failed to unmount /vendor"; return 1; }
    log " - Checking vendor block partition before resizing..."
    e2fsck -f $dm_block || { log "Error: e2fsck failed"; return 1; }
    log " - Resize - Recommended size (old size+100MB)..."
    resize2fs $dm_block ${new_blocks}K || { log "Error: resize2fs failed"; return 1; }
    log " - Make the partition R/W by unsharing its blocks..."
    e2fsck -E unshare_blocks $dm_block || { log "Error: e2fsck unshare_blocks failed"; return 1; }
    log " - Run multidisabler again!"
    return 0
}

# Function to check vendor free size
vendor_free_size_check() {
    log " - Checking vendor free size..."
    if dd if=/dev/zero of=/vendor/test bs=1 count=1 2>/dev/null; then
        log " -     ...succeeded."
        rm -f /vendor/test
    else
        log " -     ...No free space left on vendor, attempt to resizing vendor..."
        log " "
        rm -f /vendor/test
        resize_vendor || { log "Error: Failed to resize vendor"; rollback; exit 1; }
    fi
}

# Function to disable file-based encryption
disable_fbe() {
    local md5
    local i

    log " - Disabling file-based encryption (FBE) for /data..."

    for i in /vendor/etc/fstab.exynos* /vendor/etc/fstab.qcom*; do
        if [ -f $i ]; then
            log " -   Found $i."
            backup_file "$i"
            md5=$(md5 $i)
            if ! $DRY_RUN; then
                sed -i -e 's/^\([^#].*\)fileencryption=[^,]*\(.*\)$/# &\n\1encryptable\2/g' $i
            fi
            file_changed $i $md5
        fi
    done
}

# Function to disable recovery restoration
disable_recovery_restoration() {
    local r=recovery-from-boot.p
    local found
    local i

    log " - Disabling restoration of stock recovery..."

    for i in $ANDROID_ROOT $ANDROID_ROOT/system; do
        if [ -f $i/$r~ ]; then
            log " -   ...already disabled."
            found=true
            break
        fi

        if [ -f $i/$r ]; then
            log " -   Found $i/$r. Disabling..."
            backup_file "$i/$r"
            if ! $DRY_RUN; then
                mv $i/$r $i/$r~
            fi

            if [ -f $i/$r~ ]; then
                log " -     ...succeeded."
            else
                log " -     ...failed."
            fi

            found=true
            break
        fi
    done

    [ -z "$found" ] && log " -   Found no stock recovery. Pfft."
}

# Main script execution starts here
echo " "
echo "Multi-disabler v4.0 for Samsung devices"
echo "running Android 9 or later (till 13? Limiting so it doesn't break uncompatible ones...)."
echo "by Ian Macdonald, enhanced by afaneh92 and again by ragebreaker"
echo " "

# Parse command line arguments
while getopts "vd" opt; do
    case $opt in
        v) VERBOSE=true ;;
        d) DRY_RUN=true ;;
        *) echo "Usage: $0 [-v] [-d]"; exit 1 ;;
    esac
done

# Start logging
log "--- Multidisabler started at $(date) ---"

# Get device information
os=$(getprop ro.build.version.release)
major=${os%%.*}
bl=$(getprop ro.boot.bootloader)
dp=$(getprop ro.boot.dynamic_partitions)

fw=${bl:$((${#bl} - 4)):4}
device=${bl:0:$((${#bl} - 8))}
mft=$(getprop ro.product.manufacturer | tr '[A-Z]' '[a-z]')

# Check for compatibility
if ! echo "$SUPPORTED_ANDROID_VERSIONS" | grep -q "$major"; then
    log "Error: Unsupported Android version $major"
    exit 1
fi

if [ "$mft" != samsung ]; then
    log "Error: Device appears not to be made by Samsung."
    exit 1
fi

if [ -z "$device" ]; then
    log "Error: Could not determine device model."
    exit 1
fi

log "Detected a $device device with a $fw bootloader."
log "The environment appears to be Android $major."

# Mount necessary partitions
show_progress "Mounting partitions"
mount $ANDROID_ROOT 2>/dev/null
mount -o remount,rw $ANDROID_ROOT 2>/dev/null

if ! mount | grep $ANDROID_ROOT >/dev/null; then
    ANDROID_ROOT=/system_root
    mount -o rw $ANDROID_ROOT
    if ! mount | grep $ANDROID_ROOT >/dev/null; then
        log "Error: Failed to mount $ANDROID_ROOT"
        exit 1
    fi
fi

mount /vendor
mount -o remount,rw /vendor

if ! mount | grep /vendor >/dev/null; then
    log "Error: Failed to mount /vendor"
    exit 3
fi

# Perform disabling operations
if ! $DRY_RUN; then
    vendor_free_size_check
    disable_fbe
    disable_recovery_restoration
else
    log "Dry run mode: No changes will be made."
    vendor_free_size_check
    disable_fbe
    disable_recovery_restoration
fi

# Unmount partitions
show_progress "Unmounting partitions"
umount /vendor
umount $ANDROID_ROOT

log "--- Multidisabler finished at $(date) ---"
echo " "
echo "Printing log file:"
echo " "
cat $LOG_FILE
echo " "
echo "Finished. log saved at $LOG_FILE for details."
echo " "
